package nativeandroid.unistd.jnaerated;

import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPRuntime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>nativeandroid.unistd</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("c") 
@Runtime(CPPRuntime.class) 
public class unistdLibrary {
	static {
		BridJ.register();
	}
	/// <i>native declaration : /usr/include/sys/types.h</i>
	public static final int _SYS_TYPES_H = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SETPCAP = (int)8;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SETFCAP = (int)31;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_KILL = (int)5;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_NET_RAW = (int)13;
	/// <i>native declaration : /usr/include/sys/select.h</i>
	public static final int _SYS_SELECT_H = (int)1;
	/// <i>native declaration : /usr/include/sys/types.h</i>
	public static final int __BIT_TYPES_DEFINED__ = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_CHOWN = (int)0;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYS_PACCT = (int)20;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_FOWNER = (int)3;
	public static final int SEEK_END = (int)2;
	public static final int SEEK_SET = (int)0;
	public static final int W_OK = (int)2;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYS_TIME = (int)25;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int _LINUX_CAPABILITY_U32S_1 = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYS_BOOT = (int)22;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYS_MODULE = (int)16;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int _LINUX_CAPABILITY_U32S_2 = (int)2;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_AUDIT_WRITE = (int)29;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYS_RAWIO = (int)17;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SETUID = (int)7;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_MAC_OVERRIDE = (int)32;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int VFS_CAP_REVISION_1 = (int)16777216;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYS_PTRACE = (int)19;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int VFS_CAP_REVISION_2 = (int)33554432;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int VFS_CAP_U32_1 = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int VFS_CAP_U32_2 = (int)2;
	/// <i>native declaration : /usr/include/bits/sigset.h</i>
	public static final int _SIGSET_H_types = (int)1;
	/// <i>native declaration : /usr/include/linux/stddef.h</i>
	public static final int NULL = (int)0;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int VFS_CAP_REVISION_MASK = (int)-16777216;
	/// <i>native declaration : /usr/include/time.h</i>
	public static final int __timer_t_defined = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int _LINUX_CAPABILITY_U32S_3 = (int)2;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYS_CHROOT = (int)18;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_MAC_ADMIN = (int)33;
	/// <i>native declaration : /usr/include/time.h</i>
	public static final int __time_t_defined = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_DAC_OVERRIDE = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_FSETID = (int)4;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SETGID = (int)6;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_NET_BIND_SERVICE = (int)10;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int VFS_CAP_REVISION_SHIFT = (int)24;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int _LINUX_CAPABILITY_VERSION_1 = (int)429392688;
	/// <i>native declaration : /usr/include/bits/time.h</i>
	public static final int _STRUCT_TIMEVAL = (int)1;
	public static final int R_OK = (int)4;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int _LINUX_CAPABILITY_VERSION_3 = (int)537396514;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int _LINUX_CAPABILITY_VERSION_2 = (int)537333798;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_DAC_READ_SEARCH = (int)2;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_IPC_LOCK = (int)14;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_LEASE = (int)28;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_NET_ADMIN = (int)12;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_AUDIT_CONTROL = (int)30;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_NET_BROADCAST = (int)11;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYSLOG = (int)34;
	/// <i>native declaration : /usr/include/time.h</i>
	public static final int __clockid_t_defined = (int)1;
	public static final int STDIN_FILENO = (int)0;
	public static final int STDERR_FILENO = (int)2;
	public static final int X_OK = (int)1;
	/// <i>native declaration : /usr/include/bits/typesizes.h</i>
	public static final int _BITS_TYPESIZES_H = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYS_TTY_CONFIG = (int)26;
	public static final int F_OK = (int)0;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYS_RESOURCE = (int)24;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYS_NICE = (int)23;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_MKNOD = (int)27;
	/// <i>native declaration : /usr/include/bits/types.h</i>
	public static final int _BITS_TYPES_H = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_IPC_OWNER = (int)15;
	/// <i>native declaration : /usr/include/linux/posix_types.h</i>
	public static final int __FD_SETSIZE = (int)1024;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_LINUX_IMMUTABLE = (int)9;
	public static final int SEEK_CUR = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int VFS_CAP_FLAGS_EFFECTIVE = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int CAP_SYS_ADMIN = (int)21;
	/// <i>native declaration : /usr/include/asm/bitsperlong.h</i>
	public static final int __BITS_PER_LONG = (int)64;
	public static final int STDOUT_FILENO = (int)1;
	/// <i>native declaration : /usr/include/linux/capability.h:0</i>
	public static final int CAP_LAST_CAP = (int)unistdLibrary.CAP_SYSLOG;
	/// <i>native declaration : /usr/include/sys/select.h:0</i>
	public static final int FD_SETSIZE = (int)unistdLibrary.__FD_SETSIZE;
	/// <i>native declaration : /usr/include/linux/capability.h:0</i>
	public static final int _LINUX_CAPABILITY_VERSION = (int)unistdLibrary._LINUX_CAPABILITY_VERSION_1;
	/// <i>native declaration : /usr/include/linux/capability.h</i>
	public static final int VFS_CAP_FLAGS_MASK = (int)~unistdLibrary.VFS_CAP_REVISION_MASK;
	/// <i>native declaration : /usr/include/linux/capability.h:0</i>
	public static final int VFS_CAP_REVISION = (int)unistdLibrary.VFS_CAP_REVISION_2;
	/// <i>native declaration : /usr/include/linux/capability.h:0</i>
	public static final int _LINUX_CAPABILITY_U32S = (int)unistdLibrary._LINUX_CAPABILITY_U32S_1;
	/// <i>native declaration : /usr/include/linux/capability.h:0</i>
	public static final int VFS_CAP_U32 = (int)unistdLibrary.VFS_CAP_U32_2;

	
	public static native int access(Pointer<Byte > charPtr1, int int1);
	
	
	/**
	 * Type of a signal handler.<br>
	 * <i>native declaration : /usr/include/linux/posix_types.h</i>
	 *//*
	public static abstract class __kernel_sighandler_t extends Callback<__kernel_sighandler_t > {
		public abstract void apply(int int1);
	};
	public static native void _exit(int int1);
	public static native unistdLibrary.pid_t fork();
	public static native unistdLibrary.pid_t vfork();
	public static native unistdLibrary.pid_t getpid();
	public static native unistdLibrary.pid_t gettid();
	public static native unistdLibrary.pid_t getpgid(unistdLibrary.pid_t pid_t1);
	public static native int setpgid();
	public static native unistdLibrary.pid_t getppid();
	public static native unistdLibrary.pid_t getpgrp();
	public static native int setpgrp();
	public static native unistdLibrary.pid_t setsid();
	public static native int execv(Pointer<Byte > charPtr1, Pointer<Pointer<Byte > > charPtrPtr1);
	public static native int execvp(Pointer<Byte > charPtr1, Pointer<Pointer<Byte > > charPtrPtr1);
	public static native int execve(Pointer<Byte > charPtr1, Pointer<Pointer<Byte > > charPtrPtr1, Pointer<Pointer<Byte > > charPtrPtr2);
// FIXME: some JNAerator weirdness
//	public static native int execl(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, void arg1);
//	public static native int execlp(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, void arg1);
//	public static native int execle(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, void arg1);
	public static native int capget(Pointer<__user_cap_header_struct > hdrp, Pointer<__user_cap_data_struct > datap);
	public static native int capset(Pointer<__user_cap_header_struct > hdrp, Pointer<__user_cap_data_struct > datap);
	public static native int prctl(int option, @CLong long arg2, @CLong long arg3, @CLong long arg4, @CLong long arg5);
	public static native int nice(int int1);
	public static native int setuid();
	public static native unistdLibrary.uid_t getuid();
	public static native int seteuid();
	public static native unistdLibrary.uid_t geteuid();
	public static native int setgid();
	public static native unistdLibrary.gid_t getgid();
	public static native int setegid();
	public static native unistdLibrary.gid_t getegid();
	public static native int getgroups(int int1, Pointer<unistdLibrary.gid_t > gid_tPtr1);
	public static native int setgroups(@Ptr long size_t1, Pointer<unistdLibrary.gid_t > gid_tPtr1);
	public static native int setreuid();
	public static native int setregid();
	public static native int setresuid();
	public static native int setresgid();
	public static native int getresuid(Pointer<unistdLibrary.uid_t > ruid, Pointer<unistdLibrary.uid_t > euid, Pointer<unistdLibrary.uid_t > suid);
	public static native int getresgid(Pointer<unistdLibrary.gid_t > rgid, Pointer<unistdLibrary.gid_t > egid, Pointer<unistdLibrary.gid_t > sgid);
	public static native int issetugid();
	public static native Pointer<Byte > getlogin();
	public static native Pointer<Byte > getusershell();
	public static native void setusershell();
	public static native void endusershell();
	public static native int access(Pointer<Byte > charPtr1, int int1);
	public static native int link(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2);
	public static native int unlink(Pointer<Byte > charPtr1);
	public static native int chdir(Pointer<Byte > charPtr1);
	public static native int fchdir(int int1);
	public static native int rmdir(Pointer<Byte > charPtr1);
	public static native int pipe(Pointer<Integer > intPtr1);
	public static native int chroot(Pointer<Byte > charPtr1);
	public static native int symlink(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2);
	public static native int readlink(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, @Ptr long size_t1);
	public static native int chown(Pointer<Byte > charPtr1);
	public static native int fchown(int int1);
	public static native int lchown(Pointer<Byte > charPtr1);
	public static native int truncate(Pointer<Byte > charPtr1);
	public static native Pointer<Byte > getcwd(Pointer<Byte > charPtr1, @Ptr long size_t1);
	public static native int sync();
	public static native int close(int int1);
	public static native unistdLibrary.off_t lseek(int int1, unistdLibrary.off_t off_t1, int int2);
	public static native unistdLibrary.__off64_t lseek64(int int1, unistdLibrary.__off64_t loff_t1, int int2);
	public static native unistdLibrary.ssize_t read(int int1, Pointer<? > voidPtr1, @Ptr long size_t1);
	public static native unistdLibrary.ssize_t write(int int1, Pointer<? > voidPtr1, @Ptr long size_t1);
	public static native unistdLibrary.ssize_t pread(int int1, Pointer<? > voidPtr1, @Ptr long size_t1);
	public static native unistdLibrary.ssize_t pwrite(int int1, Pointer<? > voidPtr1, @Ptr long size_t1);
	public static native int dup(int int1);
	public static native int dup2(int int1, int int2);
// FIXME: some JNAerator weirdness
//	public static native int fcntl(int int1, int int2, void arg1);
//	public static native int ioctl(int int1, int int2, void arg1);
	public static native int flock(int int1, int int2);
	public static native int fsync(int int1);
	public static native int ftruncate(int int1);
	public static native int pause();
	public static native int alarm(int int1);
	public static native int sleep(int int1);
	public static native int usleep(@CLong long u1);
	public static native int gethostname(Pointer<Byte > charPtr1, @Ptr long size_t1);
	public static native int getdtablesize();
	public static native Pointer<? > __brk(Pointer<? > voidPtr1);
	public static native int brk(Pointer<? > voidPtr1);
	public static native Pointer<? > sbrk(@Ptr long ptrdiff_t1);
	public static native int getopt(int int1, Pointer<Pointer<Byte > > charPtrPtr1, Pointer<Byte > charPtr1);
	public static native int isatty(int int1);
	public static native Pointer<Byte > ttyname(int int1);
	public static native int ttyname_r(int int1, Pointer<Byte > charPtr1, @Ptr long size_t1);
	public static native int acct(Pointer<Byte > filepath);
	public static native int sysconf(int name);
	public static native int daemon(int int1, int int2);
	public static native int cacheflush(@CLong long start, @CLong long end, @CLong long flags);
	public static native unistdLibrary.pid_t tcgetpgrp(int fd);
	public static native int tcsetpgrp(int fd, unistdLibrary.pid_t _pid);
	/// Type of user identifications.
	public int __uid_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__uid_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of user identifications.
	public unistdLibrary __uid_t(int __uid_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__uid_t").as(int.class).set(__uid_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of group identifications.
	public int __gid_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__gid_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of group identifications.
	public unistdLibrary __gid_t(int __gid_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__gid_t").as(int.class).set(__gid_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of file serial numbers.
	public int __ino_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__ino_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of file serial numbers.
	public unistdLibrary __ino_t(int __ino_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__ino_t").as(int.class).set(__ino_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of file attribute bitmasks.
	public int __mode_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__mode_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of file attribute bitmasks.
	public unistdLibrary __mode_t(int __mode_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__mode_t").as(int.class).set(__mode_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of file sizes and offsets.
	public int __off_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__off_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of file sizes and offsets.
	public unistdLibrary __off_t(int __off_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__off_t").as(int.class).set(__off_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of process identifications.
	public int __pid_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__pid_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of process identifications.
	public unistdLibrary __pid_t(int __pid_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__pid_t").as(int.class).set(__pid_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	*/
	/**
	 * Type of file system IDs.<br>
	 * C type : __fsid_t_struct
	 */
	/*
	public __fsid_t_struct __fsid_t() {
		try {
			return (__fsid_t_struct)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__fsid_t").as(nativeandroid.unistd.jnaerated.__fsid_t_struct.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of CPU usage counts.
	public int __clock_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__clock_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of CPU usage counts.
	public unistdLibrary __clock_t(int __clock_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__clock_t").as(int.class).set(__clock_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type for resource measurement.
	public int __rlim_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__rlim_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type for resource measurement.
	public unistdLibrary __rlim_t(int __rlim_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__rlim_t").as(int.class).set(__rlim_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// General type for IDs.
	public int __id_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__id_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// General type for IDs.
	public unistdLibrary __id_t(int __id_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__id_t").as(int.class).set(__id_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Seconds since the Epoch.
	public int __time_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__time_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Seconds since the Epoch.
	public unistdLibrary __time_t(int __time_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__time_t").as(int.class).set(__time_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Count of microseconds.
	public int __useconds_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__useconds_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Count of microseconds.
	public unistdLibrary __useconds_t(int __useconds_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__useconds_t").as(int.class).set(__useconds_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Signed count of microseconds.
	public int __suseconds_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__suseconds_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Signed count of microseconds.
	public unistdLibrary __suseconds_t(int __suseconds_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__suseconds_t").as(int.class).set(__suseconds_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// The type of a disk address.
	public int __daddr_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__daddr_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// The type of a disk address.
	public unistdLibrary __daddr_t(int __daddr_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__daddr_t").as(int.class).set(__daddr_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of a swap block maybe?
	public int __swblk_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__swblk_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of a swap block maybe?
	public unistdLibrary __swblk_t(int __swblk_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__swblk_t").as(int.class).set(__swblk_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of an IPC key.
	public int __key_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__key_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Type of an IPC key.
	public unistdLibrary __key_t(int __key_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__key_t").as(int.class).set(__key_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int __clockid_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__clockid_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public unistdLibrary __clockid_t(int __clockid_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__clockid_t").as(int.class).set(__clockid_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : void*
	public Pointer<? > __timer_t() {
		try {
			// FIXME: JNAerator bug?
			// return (Pointer<? >)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__timer_t").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, ?.class)).get();
			throw new UnsupportedOperationException ();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : void*
	public unistdLibrary __timer_t(Pointer<? > __timer_t) {
		try {
			{
				// FIXME: JNAerator bug?
				// BridJ.getNativeLibrary("c").getSymbolPointer("__timer_t").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, ?.class)).set(__timer_t);
				// return this;
				throw new UnsupportedOperationException ();
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int __blksize_t() {
		try {
			return (int)BridJ.getNativeLibrary("c").getSymbolPointer("__blksize_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public unistdLibrary __blksize_t(int __blksize_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__blksize_t").as(int.class).set(__blksize_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int __blkcnt_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__blkcnt_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public unistdLibrary __blkcnt_t(int __blkcnt_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__blkcnt_t").as(int.class).set(__blkcnt_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int __fsblkcnt_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__fsblkcnt_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public unistdLibrary __fsblkcnt_t(int __fsblkcnt_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__fsblkcnt_t").as(int.class).set(__fsblkcnt_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int __fsfilcnt_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__fsfilcnt_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public unistdLibrary __fsfilcnt_t(int __fsfilcnt_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__fsfilcnt_t").as(int.class).set(__fsfilcnt_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int __socklen_t() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__socklen_t").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public unistdLibrary __socklen_t(int __socklen_t) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("__socklen_t").as(int.class).set(__socklen_t);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char**
	public Pointer<Pointer<Byte > > environ() {
		try {
			return (Pointer<Pointer<Byte > >)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("environ").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class))).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char**
	public unistdLibrary environ(Pointer<Pointer<Byte > > environ) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("environ").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class))).set(environ);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char*
	public Pointer<Byte > optarg() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("optarg").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char*
	public unistdLibrary optarg(Pointer<Byte > optarg) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("optarg").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).set(optarg);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int optind() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("optind").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public unistdLibrary optind(int optind) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("optind").as(int.class).set(optind);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int opterr() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("opterr").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public unistdLibrary opterr(int opterr) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("opterr").as(int.class).set(opterr);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int optopt() {
		try {
			return (int)BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("optopt").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public unistdLibrary optopt(int optopt) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.unistd").getSymbolPointer("optopt").as(int.class).set(optopt);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	public static interface __UWORD_TYPE {
		
	};
	/// Undefined type
	public static interface suseconds_t {
		
	};
	/// Undefined type
	public static interface __UQUAD_TYPE {
		
	};
	/// Undefined type
	public static interface time_t {
		
	};
	/// Undefined type
	public static interface __SWORD_TYPE {
		
	};
	/// Undefined type
	public static interface gid_t {
		
	};
	/// Undefined type
	public static interface __off64_t {
		
	};
	/// Undefined type
	public static interface pid_t {
		
	};
	/// Undefined type
	public static interface off_t {
		
	};
	/// Undefined type
	public static interface __SQUAD_TYPE {
		
	};
	/// Undefined type
	public static interface ssize_t {
		
	};
	/// Undefined type
	public static interface uid_t {
		
	};
	*/
}
