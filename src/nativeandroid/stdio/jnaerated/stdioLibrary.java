package nativeandroid.stdio.jnaerated;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPRuntime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>nativeandroid.stdio</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("c") 
@Runtime(CPPRuntime.class) 
public class stdioLibrary {
	static {
		BridJ.register();
	}
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int _SVID_SOURCE = (int)1;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_XOPEN2K = (int)1;
	public static final int EOF = (int)(-1);
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __GLIBC_MINOR__ = (int)13;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __GLIBC_HAVE_LONG_LONG = (int)1;
	public static final int __SMOD = (int)8192;
	public static final int SEEK_END = (int)2;
	public static final int __SNBF = (int)2;
	public static final int __SOFF = (int)4096;
	public static final int SEEK_SET = (int)0;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int _BSD_SOURCE = (int)1;
	public static final int __SALC = (int)16384;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_POSIX = (int)1;
	public static final int FILENAME_MAX = (int)1024;
	public static final int NULL = (int)0;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_SVID = (int)1;
	public static final int FOPEN_MAX = (int)20;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_ISOC99 = (int)1;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_ISOC95 = (int)1;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int _FEATURES_H = (int)1;
	/// <i>native declaration : /usr/include/bits/wordsize.h</i>
	public static final int __WORDSIZE = (int)64;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_POSIX2 = (int)1;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int _POSIX_SOURCE = (int)1;
	/// <i>native declaration : /usr/include/bits/predefs.h</i>
	public static final int __STDC_IEC_559__ = (int)1;
	public static final int __SOPT = (int)1024;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_XOPEN2K8 = (int)1;
	public static final int __SMBF = (int)128;
	public static final int BUFSIZ = (int)1024;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_ATFILE = (int)1;
	public static final int _IOLBF = (int)1;
	public static final int __SERR = (int)64;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __GLIBC__ = (int)2;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_FORTIFY_LEVEL = (int)0;
	public static final int TMP_MAX = (int)308915776;
	public static final int __SLBF = (int)1;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __STDC_ISO_10646__ = (int)200009;
	public static final int __SNPT = (int)2048;
	public static final int __SWR = (int)8;
	/// <i>native declaration : /usr/include/sys/cdefs.h</i>
	public static final int _SYS_CDEFS_H = (int)1;
	public static final int _IONBF = (int)2;
	/// <i>native declaration : /usr/include/bits/predefs.h</i>
	public static final int __STDC_IEC_559_COMPLEX__ = (int)1;
	public static final int L_tmpnam = (int)1024;
	public static final int __SSTR = (int)512;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_POSIX199309 = (int)1;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_POSIX199506 = (int)1;
	public static final int __SRD = (int)4;
	public static final int __SAPP = (int)256;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_POSIX_IMPLICITLY = (int)1;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_BSD = (int)1;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_MISC = (int)1;
	public static final int __SRW = (int)16;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int _ATFILE_SOURCE = (int)1;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __GNU_LIBRARY__ = (int)6;
	public static final int SEEK_CUR = (int)1;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int __USE_ANSI = (int)1;
	public static final int _IOFBF = (int)0;
	/// <i>native declaration : /usr/include/bits/wordsize.h</i>
	public static final int __WORDSIZE_COMPAT32 = (int)1;
	/// <i>native declaration : /usr/include/features.h</i>
	public static final int _POSIX_C_SOURCE = (int)200809;
	public static final int __SEOF = (int)32;
	public static native void clearerr(Pointer<FILE > FILEPtr1);
	public static native int fclose(Pointer<FILE > FILEPtr1);
	public static native int feof(Pointer<FILE > FILEPtr1);
	public static native int ferror(Pointer<FILE > FILEPtr1);
	public static native int fflush(Pointer<FILE > FILEPtr1);
	public static native int fgetc(Pointer<FILE > FILEPtr1);
	public static native int fgetpos(Pointer<FILE > FILEPtr1, Pointer<CLong > fpos_tPtr1);
	public static native Pointer<Byte > fgets(Pointer<Byte > charPtr1, int int1, Pointer<FILE > FILEPtr1);
	public static native Pointer<FILE > fopen(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2);
//	public static native int fprintf(Pointer<FILE > FILEPtr1, Pointer<Byte > charPtr1, void arg1);
	public static native int fputc(int int1, Pointer<FILE > FILEPtr1);
	public static native int fputs(Pointer<Byte > charPtr1, Pointer<FILE > FILEPtr1);
	@Ptr 
	public static native long fread(Pointer<? > voidPtr1, @Ptr long size_t1, @Ptr long size_t2, Pointer<FILE > FILEPtr1);
	public static native Pointer<FILE > freopen(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, Pointer<FILE > FILEPtr1);
//	public static native int fscanf(Pointer<FILE > FILEPtr1, Pointer<Byte > charPtr1, void arg1);
	public static native int fseek(Pointer<FILE > FILEPtr1, @CLong long l1, int int1);
	public static native int fseeko(Pointer<FILE > FILEPtr1, @CLong long off_t1, int int1);
	public static native int fsetpos(Pointer<FILE > FILEPtr1, Pointer<CLong > fpos_tPtr1);
	public static native void ftell(Pointer<FILE > FILEPtr1);
	@CLong 
	public static native long ftello(Pointer<FILE > FILEPtr1);
	@Ptr 
	public static native long fwrite(Pointer<? > voidPtr1, @Ptr long size_t1, @Ptr long size_t2, Pointer<FILE > FILEPtr1);
	public static native int getc(Pointer<FILE > FILEPtr1);
	public static native int getchar();
	public static native Pointer<Byte > gets(Pointer<Byte > charPtr1);
	public static native void perror(Pointer<Byte > charPtr1);
//	public static native int printf(Pointer<Byte > charPtr1, void arg1);
	public static native int putc(int int1, Pointer<FILE > FILEPtr1);
	public static native int putchar(int int1);
	public static native int puts(Pointer<Byte > charPtr1);
	public static native int remove(Pointer<Byte > charPtr1);
	public static native int rename(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2);
	public static native void rewind(Pointer<FILE > FILEPtr1);
//	public static native int scanf(Pointer<Byte > charPtr1, void arg1);
	public static native void setbuf(Pointer<FILE > FILEPtr1, Pointer<Byte > charPtr1);
	public static native int setvbuf(Pointer<FILE > FILEPtr1, Pointer<Byte > charPtr1, int int1, @Ptr long size_t1);
//	public static native int sprintf(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, void arg1);
//	public static native int sscanf(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, void arg1);
	public static native Pointer<FILE > tmpfile();
	public static native Pointer<Byte > tmpnam(Pointer<Byte > charPtr1);
	public static native int ungetc(int int1, Pointer<FILE > FILEPtr1);
	public static native int vfprintf(Pointer<FILE > FILEPtr1, Pointer<Byte > charPtr1);
	public static native int vprintf(Pointer<Byte > charPtr1);
	public static native int vsprintf(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2);
	public static native int __srget(Pointer<FILE > FILEPtr1);
	public static native int __swbuf(int int1, Pointer<FILE > FILEPtr1);
	/// C type : extern FILE[]
	public Pointer<FILE > __sF() {
		try {
			return (Pointer<FILE >)BridJ.getNativeLibrary("nativeandroid.stdio").getSymbolPointer("__sF").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, nativeandroid.stdio.jnaerated.FILE.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern FILE[]
	public stdioLibrary __sF(Pointer<FILE > __sF) {
		try {
			{
				BridJ.getNativeLibrary("nativeandroid.stdio").getSymbolPointer("__sF").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, nativeandroid.stdio.jnaerated.FILE.class)).set(__sF);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
}
